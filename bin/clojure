#!/usr/bin/env bash

# Script to start clojure, both REPL and scripts.
#
# To start as REPL just use: clojure
# If it exists CLOJURE_INIT is used for the inititalisation of the REPL.
#
# To start a script use: clojure <SCRIPT> [PARAMETERS]
#
# Ideally you should link /usr/local/bin/clojure to this file
# CLOJURE_JAR is used as the jar to use.


# An error should terminate the script
set -o errexit
set -o nounset


# Always define all used variables
# I use uppercase for readonly variables
declare -r CLOJURE_DIR=/usr/local/clojure
declare -r CLOJURE_JAR="${CLOJURE_DIR}/clojure.jar"
declare -r CLOJURE_JAR_ALPHA="${CLOJURE_DIR}/clojure-alpha.jar"
declare -r CLOJURE_INIT=~/Clojure/repl/repl-startup.clj
declare    CP
declare -r CP_EXTRA=":${CLOJURE_DIR}/data.int-map.jar:${CLOJURE_DIR}/data.avl.jar:${HOME}/Clojure/repl"

if [[ ${#} -ge 1 ]] && [[ "${1}" == --alpha ]] ; then
    CP="${CLOJURE_JAR_ALPHA}"; shift
else
    CP="${CLOJURE_JAR}"
fi
CP+="${CP_EXTRA}"
readonly CP

# main code
if [[ ${#} -eq 0 ]] ; then
    # REPL
    if [ -f "${CLOJURE_INIT}" ] ; then
        rlwrap java -cp "${CP}" clojure.main --init "${CLOJURE_INIT}" --repl
    else
        rlwrap java -cp "${CP}" clojure.main
    fi
else
    # Script with parameters (if any)
    rlwrap java -cp "${CP}" clojure.main "${1}" -- "${@}"
fi


# To let Emacs know it is a shell-script
# -*-sh-*-
